SQL Legend :

CREATE TABLE ... ‚Äî define a table (its columns/constraints).

INTEGER PRIMARY KEY AUTOINCREMENT ‚Äî unique row id that auto-increments.

TEXT NOT NULL ‚Äî a required string column.

UNIQUE (...) ‚Äî values in those columns must be unique (no duplicates).

CHECK (expression) ‚Äî enforce a rule at the DB level (our poor man‚Äôs enums and invariants).

REFERENCES users(id) ON DELETE CASCADE ‚Äî foreign key: if the parent user is deleted, delete these rows automatically.

DEFAULT (strftime(...)) ‚Äî default UTC timestamp using SQLite‚Äôs time function.

CREATE INDEX ... ON table(column, ...) ‚Äî speed up lookups on those columns.

CREATE TRIGGER ... AFTER UPDATE ‚Äî run a small script after a row updates (we use it to maintain updated_at).

Questions :
With the 000X syntax, is it a problem if we want to evolve our database structure ?
Explain the PRAGMA syntax. Also, if we do not use PRAGMA foreign_keys = ON, we cannot use REFERENCES table(fk) ?
Explain the triggers syntax in SQL
Do we keep friend_requests, or delete them once friendships are accepted ?
Explain the indexes syntax in SQL and how are they helpful
For a give me user, we will check the user_id and the friend_id since we have 1 record for each friendship
Are tables limited in size ? For example, the chat messages will store all the messages between users so it might grow unlimited
Is strftime a built-in function in SQL ?
How does CHECK work ? Does it return a bool or something when we try a CRUD operation on the database ?

Answers :

---

### 1. **`000X` syntax for migrations**

- Using filenames like `0001_init.sql`, `0002_add_friends.sql`, etc. is **the standard** in migration systems.
- The number prefix ensures they run in the right order (since we `.sort()` the filenames).
- If you want to **evolve the schema**, you just add a new file (`0003_add_avatar.sql`, `0004_refactor_stats.sql` ‚Ä¶).
- You **never edit old files once applied** (that would desync dev vs prod). Instead, you evolve step by step.

üëâ So no problem, in fact it‚Äôs the recommended way.

---

### 2. **PRAGMA syntax**

- `PRAGMA` is a SQLite-specific command to tweak database settings.
- Example:

  ```sql
  PRAGMA foreign_keys = ON;
  ```

  - By default, **SQLite does not enforce foreign key constraints** (!).
  - If you forget this, `REFERENCES table(column)` won‚Äôt actually work‚Äîdeletes won‚Äôt cascade, invalid references won‚Äôt be blocked.
  - With `foreign_keys = ON`, constraints are enforced.

üëâ Always keep this on in production.

---

### 3. **Triggers in SQL**

- A trigger = piece of SQL that runs automatically on `INSERT`, `UPDATE`, or `DELETE`.
- Example from your setup:

  ```sql
  CREATE TRIGGER IF NOT EXISTS trg_users_update
  AFTER UPDATE ON users
  FOR EACH ROW
  BEGIN
    UPDATE users SET updated_at = strftime('%Y-%m-%d %H:%M:%f','now')
    WHERE id = NEW.id;
  END;
  ```

  - `AFTER UPDATE ON users` ‚Üí trigger fires after any `UPDATE` on `users`.
  - `FOR EACH ROW` ‚Üí applies once per row changed.
  - `NEW` = values after the update, `OLD` = values before the update.
  - It updates the `updated_at` column automatically.

üëâ Triggers are **database-side automation** for things you don‚Äôt want to forget in your app code.

---

### 4. **Friend requests: keep or delete?**

Two approaches:

- **Keep them** with a `status` column (`pending`, `accepted`, `blocked`).

  - Pros: you have history, can re-block/unblock, audit trail.
  - Cons: table grows bigger.

- **Delete once accepted** and move to a `friends` table.

  - Pros: smaller, simpler.
  - Cons: you lose history.

üëâ Since you want a social/chat app, **keep them** with status‚Äîit‚Äôs more flexible.

---

### 5. **Indexes**

- Index = a data structure that makes lookups faster.
- Without an index, SQLite must scan **all rows** in a table (linear search).
- With an index, it can jump directly (logarithmic time).
- Syntax:

  ```sql
  CREATE INDEX idx_user_friends_user_id ON user_friends(user_id);
  ```

  - Creates an index on `user_id`.
  - Useful when you often do `WHERE user_id = ?`.

- Multi-column index:

  ```sql
  CREATE INDEX idx_friend_pair ON user_friends(user_id, friend_id);
  ```

  - Useful if you often query both together.

üëâ For your case, indexing `(user_id, friend_id)` is ideal for friend checks.

---

### 6. **Table size**

- In SQLite, tables are only limited by disk space.
- So yes, `chat_messages` can grow indefinitely.
- But indexes also grow ‚Üí queries can slow down when the table is millions of rows.
- You can:

  - Archive old messages to another table.
  - Paginate (`LIMIT 50 OFFSET 100`).
  - Add indexes on `(chat_id, created_at)` so queries like ‚Äúlast 50 messages in chat X‚Äù are fast.

---

### 7. **`strftime` in SQLite**

- Yes, built-in function.
- Returns formatted date/time strings.
- Example:

  ```sql
  strftime('%Y-%m-%d %H:%M:%f','now')
  ```

  ‚Üí `"2025-08-19 12:34:56.789"`

- Very useful for `created_at` / `updated_at` defaults.

---

### 8. **`CHECK` constraints**

- Syntax:

  ```sql
  status TEXT CHECK (status IN ('pending','accepted','blocked'))
  ```

- Every time you `INSERT` or `UPDATE`, SQLite evaluates the expression:

  - If it‚Äôs `TRUE`, the operation succeeds.
  - If `FALSE`, SQLite throws an error (`constraint failed`).

- It‚Äôs **not a bool column** stored in the table‚Äîit‚Äôs a validation rule.

Example:

```sql
INSERT INTO user_friends (user_id, friend_id, status) VALUES (1, 2, 'banana');
-- ‚ùå Error: CHECK constraint failed: user_friends
```

üëâ Think of it as **server-side validation** at the database level.

---

‚úÖ So in short:

- **Migrations**: always additive, never edit old ones.
- **PRAGMA**: foreign key enforcement ON, otherwise REFERENCES is useless.
- **Triggers**: automatic hooks for keeping timestamps, stats, etc.
- **Friend requests**: better keep them with statuses.
- **Indexes**: speed up WHERE clauses. Use `(user_id, friend_id)` for friendship lookups.
- **Tables**: no real limit except disk size, but index wisely.
- **strftime**: built-in timestamp formatter.
- **CHECK**: runtime constraint validation on CRUD.

---
